#!/usr/bin/env bash
# Smart wrapper for running integration tests (keeps backward compatibility)
# - In BACKUP_MODE=wal it will generate a local SSH key under secrets/walg_ssh_key
#   so the postgres wal-g setup can proceed in the test container.
# - It chooses sensible environment flags depending on BACKUP_MODE.

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
TEST_SCRIPT="$SCRIPT_DIR/test/run-tests.sh"

if [[ ! -f "$TEST_SCRIPT" ]]; then
	echo "Error: test script not found at $TEST_SCRIPT" >&2
	exit 2
fi

# Determine mode from environment or .env
BACKUP_MODE="${BACKUP_MODE:-}"
if [[ -z "$BACKUP_MODE" && -f "$SCRIPT_DIR/.env" ]]; then
	# shellcheck disable=SC1090
	# Source .env into the current shell so exported values (like BACKUP_MODE)
	# are available to this script. We temporarily enable allexport so simple
	# KEY=VALUE lines are exported as environment variables.
	set -o allexport
	source "$SCRIPT_DIR/.env" >/dev/null 2>&1 || true
	set +o allexport
	BACKUP_MODE="${BACKUP_MODE:-}"
fi

run_sql_mode() {
	echo "Running tests in SQL backup mode..."
	# keep simple invocation for SQL mode
	BACKUP_MODE=sql CLEANUP=1 "$TEST_SCRIPT" "$@"
}

run_wal_mode() {
	echo "Running tests in WAL (wal-g) backup mode..."
	
	# Step 1: Setup local SSH server and configure environment  
	echo "Setting up local SSH server and environment..."
	"$SCRIPT_DIR/scripts/setup-local-ssh.sh"
	echo "SSH server setup completed."
	
	# Step 2: Clean up any existing containers and volumes to avoid conflicts
	echo "Cleaning up any existing containers and volumes..."
	docker compose --profile ssh-testing down -v 2>/dev/null || true
	if docker volume ls --format '{{.Name}}' | grep -q '^postgres-data$'; then
		docker volume rm postgres-data 2>/dev/null || true
		echo "Removed existing postgres-data volume"
	fi
	
	# Step 3: Start the stack with SSH server using temporary containers
	echo "Starting stack with SSH server for testing..."
	docker compose --profile ssh-testing up --build -d
	echo "Docker stack started with SSH testing profile."
	
	# Step 4: Run comprehensive E2E tests
	echo "Running comprehensive WAL-G E2E tests..."
	if [[ -f "$SCRIPT_DIR/test/test-walg-e2e.sh" ]]; then
		CLEANUP=1 "$SCRIPT_DIR/test/test-walg-e2e.sh" "$@"
	else
		echo "WAL-G E2E test script not found, falling back to basic tests..."
		# Fallback to basic test runner with wal-g specific settings
		FORCE_EMPTY_PGDATA=1 SKIP_SSH_KEYSCAN=1 BACKUP_MODE=wal CLEANUP=1 "$TEST_SCRIPT" "$@"
	fi
	
	# Step 5: Clean up test environment (volumes and containers)
	echo "Cleaning up test environment..."
	docker compose --profile ssh-testing down -v
	echo "Test environment cleaned up."
}

case "$BACKUP_MODE" in
	wal|WAL|Wal)
		run_wal_mode "$@"
		;;
	sql|SQL|Sql)
		run_sql_mode "$@"
		;;
	"")
		# Default to SQL mode for safety if not specified
		echo "No BACKUP_MODE detected; defaulting to SQL mode (safer)." >&2
		run_sql_mode "$@"
		;;
	*)
		echo "Unknown BACKUP_MODE='$BACKUP_MODE' - please set BACKUP_MODE=sql or wal" >&2
		exit 3
		;;
esac
