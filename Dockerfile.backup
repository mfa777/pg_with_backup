FROM alpine:3.21

# Set environment variables
ENV TZ=UTC
ENV BACKUP_CRON_SCHEDULE="0 2 * * *"
ENV BACKUP_MODE=sql

# Install required packages (start with original packages and add wal-g specific ones)
RUN apk add --no-cache \
    bash \
    postgresql17-client \
    curl \
    rclone \
    age \
    tzdata \
    ca-certificates \
    lz4 \
    openssh-client && \
    rm -rf /var/cache/apk/*

# Download and install wal-g (use static binary to avoid glibc issues)
ARG WALG_VERSION=v2.0.1
RUN curl -L -o /tmp/wal-g.tar.gz https://github.com/wal-g/wal-g/releases/download/${WALG_VERSION}/wal-g-pg-ubuntu-20.04-amd64.tar.gz \
    && tar -xzf /tmp/wal-g.tar.gz -C /usr/local/bin \
    && if [ -f /usr/local/bin/wal-g-pg-ubuntu-20.04-amd64 ]; then \
        mv /usr/local/bin/wal-g-pg-ubuntu-20.04-amd64 /usr/local/bin/wal-g; \
        chmod +x /usr/local/bin/wal-g; \
    else \
        echo "Warning: wal-g binary not found after extraction"; \
    fi \
    && rm -f /tmp/wal-g.tar.gz \
    || echo "Warning: wal-g download failed, but continuing for SQL mode compatibility"

# Create directories
RUN mkdir -p /config/rclone /tmp/backups /var/lib/backup/state /var/log \
    && mkdir -p /opt/walg/scripts

# Copy scripts
COPY backup.sh /usr/local/bin/backup.sh
COPY scripts/wal-g-runner.sh /opt/walg/scripts/wal-g-runner.sh
COPY scripts/walg-env-prepare.sh /opt/walg/scripts/walg-env-prepare.sh
COPY entrypoint-backup.sh /entrypoint.sh

# Make scripts executable
RUN chmod +x /usr/local/bin/backup.sh /opt/walg/scripts/*.sh /entrypoint.sh

# --- Runtime ---
ENTRYPOINT ["/entrypoint.sh"]
CMD ["crond", "-f", "-l", "8"]