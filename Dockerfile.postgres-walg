# PostgreSQL version - configured via POSTGRES_VERSION in .env file
# Default value here is only used if building directly with 'docker build' (without docker-compose)
ARG POSTGRES_VERSION=18.0
FROM postgres:${POSTGRES_VERSION}

# Set argument for wal-g version
ARG WALG_VERSION=v3.0.7

# Install required packages for wal-g, SSH and build deps for extensions (pgvector)
RUN apt-get update && apt-get install -y --no-install-recommends \
    curl \
    ca-certificates \
    lz4 \
    brotli \
    zstd \
    openssh-client \
    procps \
    wget \
    gnupg \
    git \
    build-essential \
    pgbouncer \
    && rm -rf /var/lib/apt/lists/*

# Download and install wal-g
RUN set -eux; \
    echo "Downloading wal-g version ${WALG_VERSION}..."; \
    wget --no-check-certificate -O /tmp/wal-g.tar.gz "https://github.com/wal-g/wal-g/releases/download/${WALG_VERSION}/wal-g-pg-ubuntu-20.04-amd64.tar.gz"; \
    echo "Extracting wal-g..."; \
    cd /tmp && tar -tzf wal-g.tar.gz; \
    tar -xzf /tmp/wal-g.tar.gz -C /usr/local/bin; \
    ls -la /usr/local/bin/wal-g* || echo "No wal-g found after extraction"; \
    # Rename the extracted binary to just 'wal-g' \
    if [ -f /usr/local/bin/wal-g-pg-ubuntu-20.04-amd64 ]; then \
        mv /usr/local/bin/wal-g-pg-ubuntu-20.04-amd64 /usr/local/bin/wal-g; \
        chmod +x /usr/local/bin/wal-g; \
        echo "wal-g installed successfully"; \
    else \
        echo "ERROR: wal-g binary not found after extraction"; \
        find /usr/local/bin -name '*wal*' -type f || echo "No wal-g files found"; \
        exit 1; \
    fi; \
    rm -f /tmp/wal-g.tar.gz

# Create necessary directories
RUN mkdir -p /opt/walg/scripts \
    && mkdir -p /opt/scripts \
    && mkdir -p /etc/postgresql \
    && mkdir -p /var/lib/postgresql/.ssh \
    && chown -R postgres:postgres /var/lib/postgresql/.ssh \
    && chmod 700 /var/lib/postgresql/.ssh \
    && mkdir -p /etc/pgbouncer \
    && mkdir -p /var/run/pgbouncer \
    && mkdir -p /var/log/pgbouncer \
    && chown -R postgres:postgres /etc/pgbouncer /var/run/pgbouncer /var/log/pgbouncer

# Copy PostgreSQL configuration template
COPY postgresql.conf.template /etc/postgresql/postgresql.conf.template

# Copy PgBouncer configuration template
COPY pgbouncer.ini.template /etc/pgbouncer/pgbouncer.ini.template

# Copy wal-g scripts
COPY scripts/wal-g-runner.sh /opt/walg/scripts/wal-g-runner.sh
COPY scripts/walg-env-prepare.sh /opt/walg/scripts/walg-env-prepare.sh
COPY scripts/docker-entrypoint-walg.sh /usr/local/bin/docker-entrypoint-walg.sh
COPY scripts/setup-pgbouncer.sh /opt/scripts/setup-pgbouncer.sh
COPY scripts/wal-g-wrapper.sh /opt/walg/scripts/wal-g-wrapper.sh

# Make scripts executable
RUN chmod +x /opt/walg/scripts/*.sh /usr/local/bin/docker-entrypoint-walg.sh /opt/scripts/setup-pgbouncer.sh

# Install wal-g wrapper to ensure environment is always loaded
# Rename the original wal-g binary and install wrapper as wal-g
RUN mv /usr/local/bin/wal-g /usr/local/bin/wal-g.bin && \
    cp /opt/walg/scripts/wal-g-wrapper.sh /usr/local/bin/wal-g && \
    chmod +x /usr/local/bin/wal-g

# Build and install pgvector extension (optional - skip if build fails)
RUN set -eux; \
    if apt-get update && apt-get install -y --no-install-recommends postgresql-server-dev-17; then \
        git clone --depth 1 https://github.com/pgvector/pgvector.git /tmp/pgvector; \
        cd /tmp/pgvector; \
        make && make install; \
        rm -rf /tmp/pgvector; \
    else \
        echo "Skipping pgvector build due to dependency issues"; \
    fi; \
    rm -rf /var/lib/apt/lists/*

# Use our custom entrypoint
ENTRYPOINT ["/usr/local/bin/docker-entrypoint-walg.sh"]
CMD ["postgres"]