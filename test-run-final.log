Running tests in WAL (wal-g) backup mode...
Running comprehensive WAL-G E2E tests...
== Starting WAL-G End-to-End Testing ==
== == FORCE_EMPTY_PGDATA=1: removing postgres-data volume and any previous compose state ==
postgres-data
PASS: postgres-data volume removed
== == Preparing an empty postgres-data volume to avoid image population ==
total 8
drwxr-xr-x    2 root     root          4096 Oct 31 05:26 .
drwxr-xr-x    1 root     root          4096 Oct 31 05:26 ..
PASS: postgres-data prepared and emptied
== == Cleaning remote backup storage to avoid LSN conflicts ==
PASS: Remote backup storage cleaned
== Restarting stack after volume cleanup ==
#1 [internal] load local bake definitions
#1 reading from stdin 1.02kB done
#1 DONE 0.0s

#2 [backup internal] load build definition from Dockerfile.backup
#2 transferring dockerfile: 2.38kB done
#2 DONE 0.0s

#3 [postgres internal] load build definition from Dockerfile.postgres-walg
#3 transferring dockerfile: 3.17kB done
#3 DONE 0.0s

#4 [backup internal] load metadata for docker.io/library/alpine:3.21
#4 DONE 0.0s

#5 [backup internal] load .dockerignore
#5 transferring context: 2B done
#5 DONE 0.0s

#6 [postgres internal] load metadata for docker.io/library/postgres:17.6
#6 ...

#7 [backup 1/9] FROM docker.io/library/alpine:3.21
#7 DONE 0.0s

#8 [backup internal] load build context
#8 transferring context: 8.49kB done
#8 DONE 0.0s

#9 [backup 3/9] RUN set -eux;     apk add --no-cache --virtual .build-deps curl tar wget;     echo "Downloading wal-g version v3.0.7...";     wget --no-check-certificate -O /tmp/wal-g.tar.gz "https://github.com/wal-g/wal-g/releases/download/v3.0.7/wal-g-pg-ubuntu-20.04-amd64.tar.gz";     echo "Extracting wal-g...";     cd /tmp && tar -tzf wal-g.tar.gz;     tar -xzf /tmp/wal-g.tar.gz -C /usr/local/bin;     ls -la /usr/local/bin/wal-g* || echo "No wal-g found after extraction";     if [ -f /usr/local/bin/wal-g-pg-ubuntu-20.04-amd64 ]; then         mv /usr/local/bin/wal-g-pg-ubuntu-20.04-amd64 /usr/local/bin/wal-g;         chmod +x /usr/local/bin/wal-g;         echo "wal-g installed successfully";         if /usr/local/bin/wal-g --version >/dev/null 2>&1; then             echo "wal-g binary test successful";         else             echo "WARNING: wal-g binary test failed but continuing";         fi;     else         echo "ERROR: wal-g binary not found after extraction";         find /usr/local/bin -name '*wal*' -type f || echo "No wal-g files found";         exit 1;     fi;     rm -f /tmp/wal-g.tar.gz;     apk del .build-deps
#9 CACHED

#10 [backup 4/9] RUN mkdir -p /config/rclone /tmp/backups /var/lib/backup/state /var/log     && mkdir -p /opt/walg/scripts
#10 CACHED

#11 [backup 5/9] COPY backup.sh /usr/local/bin/backup.sh
#11 CACHED

#12 [backup 7/9] COPY scripts/walg-env-prepare.sh /opt/walg/scripts/walg-env-prepare.sh
#12 CACHED

#13 [backup 2/9] RUN apk add --no-cache     bash     postgresql17-client     curl     rclone     age     tzdata     ca-certificates     lz4     openssh-client     gcompat &&     rm -rf /var/cache/apk/*
#13 CACHED

#14 [backup 6/9] COPY scripts/wal-g-runner.sh /opt/walg/scripts/wal-g-runner.sh
#14 CACHED

#15 [backup 8/9] COPY entrypoint-backup.sh /entrypoint.sh
#15 CACHED

#16 [backup 9/9] RUN chmod +x /usr/local/bin/backup.sh /opt/walg/scripts/*.sh /entrypoint.sh
#16 CACHED

#17 [backup] exporting to image
#17 exporting layers done
#17 writing image sha256:2f4ff7659e2ce944f681afe02d3be0259a576eaca4c1fd6437fcc82272e30079 done
#17 naming to docker.io/library/pg_with_backup-backup done
#17 DONE 0.0s

#18 [backup] resolving provenance for metadata file
#18 DONE 0.0s

#6 [postgres internal] load metadata for docker.io/library/postgres:17.6
#6 DONE 1.2s

#5 [postgres internal] load .dockerignore
#5 CACHED

#19 [postgres  1/12] FROM docker.io/library/postgres:17.6@sha256:b480430782a9bd1c8a6835fb5b70f89f34a70132c2f6182e534f65688bce063b
#19 DONE 0.0s

#20 [postgres internal] load build context
#20 transferring context: 7.97kB done
#20 DONE 0.0s

#21 [postgres  8/12] COPY scripts/walg-env-prepare.sh /opt/walg/scripts/walg-env-prepare.sh
#21 CACHED

#22 [postgres  3/12] RUN set -eux;     echo "Downloading wal-g version v3.0.7...";     wget --no-check-certificate -O /tmp/wal-g.tar.gz "https://github.com/wal-g/wal-g/releases/download/v3.0.7/wal-g-pg-ubuntu-20.04-amd64.tar.gz";     echo "Extracting wal-g...";     cd /tmp && tar -tzf wal-g.tar.gz;     tar -xzf /tmp/wal-g.tar.gz -C /usr/local/bin;     ls -la /usr/local/bin/wal-g* || echo "No wal-g found after extraction";     if [ -f /usr/local/bin/wal-g-pg-ubuntu-20.04-amd64 ]; then         mv /usr/local/bin/wal-g-pg-ubuntu-20.04-amd64 /usr/local/bin/wal-g;         chmod +x /usr/local/bin/wal-g;         echo "wal-g installed successfully";     else         echo "ERROR: wal-g binary not found after extraction";         find /usr/local/bin -name '*wal*' -type f || echo "No wal-g files found";         exit 1;     fi;     rm -f /tmp/wal-g.tar.gz
#22 CACHED

#23 [postgres 11/12] RUN chmod +x /opt/walg/scripts/*.sh /usr/local/bin/docker-entrypoint-walg.sh /opt/scripts/setup-pgbouncer.sh
#23 CACHED

#24 [postgres  5/12] COPY postgresql.conf.template /etc/postgresql/postgresql.conf.template
#24 CACHED

#25 [postgres  4/12] RUN mkdir -p /opt/walg/scripts     && mkdir -p /opt/scripts     && mkdir -p /etc/postgresql     && mkdir -p /var/lib/postgresql/.ssh     && chown -R postgres:postgres /var/lib/postgresql/.ssh     && chmod 700 /var/lib/postgresql/.ssh     && mkdir -p /etc/pgbouncer     && mkdir -p /var/run/pgbouncer     && mkdir -p /var/log/pgbouncer     && chown -R postgres:postgres /etc/pgbouncer /var/run/pgbouncer /var/log/pgbouncer
#25 CACHED

#26 [postgres 10/12] COPY scripts/setup-pgbouncer.sh /opt/scripts/setup-pgbouncer.sh
#26 CACHED

#27 [postgres  9/12] COPY scripts/docker-entrypoint-walg.sh /usr/local/bin/docker-entrypoint-walg.sh
#27 CACHED

#28 [postgres  2/12] RUN apt-get update && apt-get install -y --no-install-recommends     curl     ca-certificates     lz4     brotli     zstd     openssh-client     procps     wget     gnupg     git     build-essential     pgbouncer     && rm -rf /var/lib/apt/lists/*
#28 CACHED

#29 [postgres  6/12] COPY pgbouncer.ini.template /etc/pgbouncer/pgbouncer.ini.template
#29 CACHED

#30 [postgres  7/12] COPY scripts/wal-g-runner.sh /opt/walg/scripts/wal-g-runner.sh
#30 CACHED

#31 [postgres 12/12] RUN set -eux;     if apt-get update && apt-get install -y --no-install-recommends postgresql-server-dev-17; then         git clone --depth 1 https://github.com/pgvector/pgvector.git /tmp/pgvector;         cd /tmp/pgvector;         make && make install;         rm -rf /tmp/pgvector;     else         echo "Skipping pgvector build due to dependency issues";     fi;     rm -rf /var/lib/apt/lists/*
#31 CACHED

#32 [postgres] exporting to image
#32 exporting layers done
#32 writing image sha256:77d516d376e18f38ff81f4b4afbeba0bd72eda986ea11b7d3c89f4159053f0cd done
#32 naming to docker.io/library/pg_with_backup-postgres done
#32 DONE 0.0s

#33 [postgres] resolving provenance for metadata file
#33 DONE 0.0s
 pg_with_backup-postgres  Built
 pg_with_backup-backup  Built
 Network postgres-network  Creating
 Network postgres-network  Created
 Volume backup-state  Creating
 Volume backup-state  Created
 Volume ssh-server-data  Creating
 Volume ssh-server-data  Created
 Volume ssh-backups  Creating
 Volume ssh-backups  Created
 Volume pgadmin-data  Creating
 Volume pgadmin-data  Created
 Container postgres  Creating
 Container ssh-server  Creating
 Container ssh-server  Created
 Container postgres  Created
 Container pg_with_backup-backup-1  Creating
 Container pg_with_backup-pgadmin-1  Creating
 Container pg_with_backup-pgadmin-1  Created
 Container pg_with_backup-backup-1  Created
 Container postgres  Starting
 Container ssh-server  Starting
 Container postgres  Started
 Container pg_with_backup-pgadmin-1  Starting
 Container pg_with_backup-backup-1  Starting
 Container ssh-server  Started
 Container pg_with_backup-pgadmin-1  Started
 Container pg_with_backup-backup-1  Started
Container IDs:
  - PostgreSQL: fe3c9cc0810752b686c7ce395f8828faa30f3560af57c10d5c62814fa22aea1d
  - Backup: 65c19653151c28d7a8df95b8c13ff4c536348ae9534fcbca1b0af0faf7472a76
  - SSH Server: c384989599f0a57e2833f5454c70db32709617e61b35ea18ab983e6916748a9a

== Waiting for services to be ready ==
PASS: PostgreSQL is ready
PASS: External SSH server assumed available (not checking container)
Setting up backup directory permissions...
