services:
  postgres:
    build:
      context: .
      dockerfile: Dockerfile.postgres-walg
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      BACKUP_MODE: ${BACKUP_MODE:-sql}
      # wal-g environment variables (only used when BACKUP_MODE=wal)
      WALG_SSH_PREFIX: ${WALG_SSH_PREFIX:-}
      WALG_SSH_PRIVATE_KEY: ${WALG_SSH_PRIVATE_KEY:-}
      WALG_SSH_PRIVATE_KEY_PATH: ${WALG_SSH_PRIVATE_KEY_PATH:-}
      WALG_COMPRESSION_METHOD: ${WALG_COMPRESSION_METHOD:-lz4}
      WALG_DELTA_MAX_STEPS: ${WALG_DELTA_MAX_STEPS:-7}
      WALG_DELTA_ORIGIN: ${WALG_DELTA_ORIGIN:-LATEST}
      WALG_LOG_LEVEL: ${WALG_LOG_LEVEL:-DEVEL}
      SKIP_SSH_KEYSCAN: ${SKIP_SSH_KEYSCAN:-0}
      # Explicit SSH variables recognized by wal-g (v3) CLI
      SSH_PORT: "${SSH_PORT:-}"
      SSH_USERNAME: "${SSH_USERNAME:-}"
    volumes:
      - pg_data:/var/lib/postgresql/data
      # Conditionally mount SSH key (create empty file if not exists)
      - ${SSH_KEY_PATH:-./secrets/walg_ssh_key}:/secrets/walg_ssh_key:ro
    networks:
      - pg_network

  backup:
    build:
      context: .
      dockerfile: Dockerfile.backup
    restart: unless-stopped
    env_file: .env
    volumes:
      # Dedicated volume for backup state (no dependency on pg_data for SQL mode)
      - backup_state:/var/lib/backup:rw
      # Mount postgres data for wal-g mode backups
      - pg_data:/var/lib/postgresql/data:rw
      # Mount SSH key for wal-g mode
      - ${SSH_KEY_PATH:-./secrets/walg_ssh_key}:/secrets/walg_ssh_key:ro
    depends_on:
      - postgres
    networks:
      - pg_network

  # Local SSH server for wal-g testing (only used when ENABLE_SSH_SERVER=1)
  ssh-server:
    image: linuxserver/openssh-server:latest
    container_name: ssh-server
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${TZ:-UTC}
      - SUDO_ACCESS=false
      - PASSWORD_ACCESS=false
      - USER_NAME=${SSH_USER:-walg}
    volumes:
      - ssh_data:/config
      - ssh_backups:/backups
      # Mount SSH public key for authentication
      - ${SSH_KEY_PATH:-./secrets/walg_ssh_key}/id_rsa.pub:/config/.ssh/authorized_keys:ro
    ports:
      - "127.0.0.1:2222:2222"
    networks:
      - pg_network
    profiles:
      - ssh-testing

  pgadmin:
    image: dpage/pgadmin4:latest
    restart: always
    ports:
      # Keep pgAdmin port exposed so YOU can access it from your browser
      - "127.0.0.1:8080:80"
    volumes:
      # Persist pgAdmin data and configuration
      - pgadmin_data:/var/lib/pgadmin
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL:-admin@admin.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD:-admin}
      - PGADMIN_DISABLE_POSTFIX=true
    depends_on:
      - postgres
    networks:
      # Ensure pgAdmin is on the same network with postgres
      - pg_network

volumes:
  pg_data:
    name: postgres-data # Named volume for clarity
    external: true
  backup_state:
    name: backup-state # Named volume for backup service state
  pgadmin_data:
    name: pgadmin-data # Named volume for pgAdmin data
  ssh_data:
    name: ssh-server-data # Named volume for SSH server configuration
  ssh_backups:
    name: ssh-backups # Named volume for SSH server backup storage

networks:
  pg_network:
    driver: bridge
    name: postgres-network # More standard naming
